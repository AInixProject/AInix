---
defines:
    - define_new: object
      name: find
      type: Program
      type_data:
          invoke_name: "find"
          ignore_invalid_flags: True
      children:
          - name: startpoints
            required: False
            type: Path
            # This really should be multiword, but that would break parsing
            # as the expression is multiword. Find treats everything up until it
            # sees a "-" as a path. See man page...
            arg_data: {position: 0, multiword_pos_arg: False}
          - name: expression
            required: True
            type: FindExpression
            arg_data: {position: 1, multiword_pos_arg: True}
    - define_new: type
      name: FindExpression
    - define_new: object
      name: find_expression_object
      type: FindExpression
      children:
          - name: current_find_value
            type: FindValue
            required: True
          - name: next_expression
            type: FindExpression
            required: False
      preferred_object_parser:
        grammar: |
          current_find_value (" " next_expression)?
    # A find value encompeses both "Options" and "Tests"
    - define_new: type
      name: FindValue
      default_type_parser: max_munch_type_parser
    # -name
    - define_new: object
      name: find_option_name
      type: FindValue
      children:
          - name: namepattern
            type: QuotedFile
            required: True
      preferred_object_parser:
          grammar: |
              "-name " namepattern
    - define_new: type
      name: QuotedFile
    - define_new: object
      name: double_quoted_file
      type: QuotedFile
      children:
          - name: file
            type: Path
            required: True
      preferred_object_parser:
          grammar: |
              '"' file '"'
    # -type
    - define_new: object
      name: find_option_type
      type: FindValue
      children:
      - name: findtype
        type: FindTypeLetter
        required: True
      preferred_object_parser:
            grammar: |
                  "-type " findtype
    - define_new: type
      name: FindTypeLetter
      default_type_parser: max_munch_type_parser
    - define_new: object
      name: find_type_letter_f
      type: FindTypeLetter
      preferred_object_parser:
            grammar: |
                  "f"
    - define_new: object
      name: find_type_letter_d
      type: FindTypeLetter
      preferred_object_parser:
            grammar: |
                  "d"
    # -empty
    - define_new: object
      name: find_option_empty
      type: FindValue
      preferred_object_parser:
          grammar: |
              "-empty"
    # -user
    - define_new: object
      name: find_option_user
      type: FindValue
      children:
          - name: username
            type: Username
            required: True
      preferred_object_parser:
          grammar: |
              "-user " username
    - define_new: type
      name: Username
    - define_new: object
      name: username_object
      type: Username
      children:
          - name: value
            # TODO (DNGros): after adding type unions adjust so only letters
            type: GenericWord
            required: True
      preferred_object_parser:
          grammar: |
              value
    # -user
    - define_new: object
      name: find_option_group
      type: FindValue
      children:
          - name: groupname
            type: Groupname
            required: True
      preferred_object_parser:
          grammar: |
              "-group " groupname
    - define_new: type
      name: Groupname
    - define_new: object
      name: groupname_object
      type: Groupname
      children:
          - name: value
            # TODO (DNGros): after adding type unions adjust so only letters
            type: GenericWord
            required: True
      preferred_object_parser:
          grammar: |
              value
    # -maxdepth
    - define_new: object
      name: find_option_max_depth
      type: FindValue
      children:
          - name: depth
            type: IntBase
            required: True
      preferred_object_parser:
          grammar: |
              "-maxdepth " depth
...
